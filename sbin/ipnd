#!/usr/bin/perl -w

use strict;
use File::Basename;
use File::Spec::Functions qw(:DEFAULT devnull);
use Sys::Hostname;
use Encode qw(encode_utf8 decode_utf8);
use JSON;
use Data::Dumper;
use Mojo::Server::Daemon;
use DateTime;
use DateTime::Format::MySQL;
use Carp;

use Slash;
use Slash::Constants ':slashd';
use Slash::Display;
use Slash::Utility;
use Slash::Subscribe;
use LWP::UserAgent 6;
use MIME::Base64;
use Crypt::CBC;

use vars qw(
	$PROGNAME $virtual_user $hostname
);

$virtual_user = $ARGV[0];
$hostname = $ENV{SF_SYSTEM_FUNC} || hostname();

#$PROGNAME = basename($0);
#$0 = "$PROGNAME $virtual_user";

eval {
	createEnvironment($virtual_user);
};
if ($@) {
	if ($@ =~ /DBIx::Password has no information about the virtual user/
		&& $virtual_user eq 'start') {
		die <<"EOT";
$@
To be more specific, your error is that, per step 7 of the INSTALLATION
section in the INSTALL file (please reread), you need to start ipnd
with '/etc/init.d/ipn start', not '/usr/local/slash/sbin/ipnd start'.
EOT
	}
	die $@;
}
my $constants = getCurrentStatic();
my $slashdb = getCurrentDB();
my $user = getCurrentUser();
setCurrentSkin(determineCurrentSkin());
my $gSkin = getCurrentSkin();
my @paths = (
	$constants->{pp_ipn_path},
	$constants->{stripe_ipn_path}
);


if (!$constants->{plugin}{Subscribe}) {
	die <<"EOT";
$@
Subscribe Plugin not installed.
EOT
}

my $pid_file = $constants->{logdir}.'/ipnd.pid';
local *PIDFILE;

# Check for the PID file's existance
if (-e $pid_file) {
	#die ("Program already running or ended prematurely. \n");
}

# Create the PID file
# Use the 3 argument form of open for safety
open PIDFILE, ">", $pid_file or die "Could not open pid file:  $pid_file";
print PIDFILE "$$";
close PIDFILE;


my $logfile = devnull();
if ($constants->{pp_ipn_debugfile}){
	$logfile = $constants->{logdir}.'/ipnd.log';
}

open(STDOUT, '+>>', $logfile);
open(STDERR, ">&STDOUT");
select STDERR; $| = 1;      # make unbuffered
select STDOUT; $| = 1;      # make unbuffered


my $subscribe = getObject('Slash::Subscribe');

my $cbHost = $constants->{pp_ipn_host};
my $cbPort = $constants->{pp_ipn_port};

my @args = ( 'reuse', 'ca', 'cert', 'ciphers', 'key', 'verify');
my @cbTheRest;
foreach(@args){
	my $pp_ipn_var = "pp_ipn_".$_;
	push(@cbTheRest, "$_=".$constants->{$pp_ipn_var}) if $constants->{$pp_ipn_var};
}
my $cbArgs = join('&', @cbTheRest);

my $cbServer;
if ($cbArgs){
	$cbServer = Mojo::Server::Daemon->new(listen => ["$cbHost:$cbPort?$cbArgs"]);
} else {
	$cbServer = Mojo::Server::Daemon->new(listen => ["$cbHost:$cbPort"]);
}

if (!$cbServer) {
	die <<"EOT";
$@
Mojo server not initiated.
EOT
}

# And a wee bit more config for the daemon
$cbServer->max_clients(10);
$cbServer->max_requests(25);
$cbServer->silent($constants->{pp_ipn_silent});
$cbServer->inactivity_timeout(5);

$cbServer->unsubscribe('request');
$cbServer->on(request => sub {
	my ($daemon, $tx) = @_;
	
	my $logthis = { remote_address => $tx->{original_remote_address} };

	# Don't even bother trying to process or log requests not to our chosen path
	my $reqPath = $tx->req->url->path;
	my $goodPath = 0;
	foreach my $path (@paths) {
		$goodPath = 1 if $reqPath eq $path;
	}

	unless( $goodPath ) {
		print STDOUT "Request for $reqPath. \n";
		$tx->res->code(200);
			$tx->res->headers->content_type('text/plain');
			$tx->res->body("Request for $reqPath. \n");
			$tx->resume;
		return 0
	}

	my $content = $tx->req->content;
	if($reqPath eq $constants->{pp_ipn_path}) {
		
		
		# read post from PayPal system and add 'cmd'
		my $query = $content->{asset}->{content}.'&cmd=_notify-validate';
		
		# post back to PayPal system to validate
		my $gateway = $constants->{paypal_host};
		my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 1, SSL_ca_path => $constants->{pp_SSL_ca_path} });
		my $req = HTTP::Request->new('POST', "https://$gateway/cgi-bin/webscr");
		$req->content_type('application/x-www-form-urlencoded');
		$req->header(Host => $gateway);
		$req->content($query);
		my $res = $ua->request($req);
		
		# split posted variables into pairs
		my $paypal;
		my @pairs = split(/&/, $query);
		my $count = 0;
		foreach my $pair (@pairs) {
			my ($name, $value) = split(/=/, $pair);
			$value =~ tr/+/ /;
			$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
			$paypal->{$name} = $value;
			$count++;
		}
		eval { $paypal->{custom} = decode_json($paypal->{custom}); };
		unless(ref($paypal->{custom}) eq "HASH" && !$@) {
			print "Malformed JSON in \$paypal->{custom}\n".Dumper($paypal);
			return;
		}
		
		$logthis = $paypal if $paypal;
		$logthis->{remote_address} = $tx->{original_remote_address};



		if(defined $paypal->{payment_status} && $paypal->{payment_status} eq 'Completed' && $res->content eq 'VERIFIED'){
			if(!$subscribe->paymentExists($paypal->{txn_id})){
				# Check if PDT got transaction first.
				my $payment_net = $paypal->{payment_gross} - $paypal->{payment_fee};
				
				my $quantity = $paypal->{quantity} || 1;
				my $payment = {
					days => $paypal->{custom}{days} * $quantity,
					uid	=> $paypal->{custom}{uid},
					payment_net   => $payment_net,
					payment_gross => $paypal->{payment_gross},
					payment_type  => $paypal->{custom}{type},
					transaction_id => $paypal->{txn_id},
					method => 'paypal',
					email => $paypal->{custom}{from},
					raw_transaction  => encode_json($paypal),
					puid => $paypal->{custom}{puid}
				};
			
				if (!$subscribe->paymentExists($paypal->{txn_id})){
					# Doulbe check as we have a race condition going on here.
				
					my ($rows, $result, $warning);
					$rows = $subscribe->insertPayment($payment);
					if ($rows && $rows == 1) {
						$result = $subscribe->addDaysToSubscriber($payment->{uid}, $payment->{days});
						if ($result && $result == 1){
							send_gift_msg($payment->{uid}, $payment->{puid}, $payment->{days}, $payment->{email}) if $payment->{payment_type} eq "gift";
						} else {
							$warning = "DEBUG: Payment accepted but user subscription not updated!\n" . Dumper($payment);
							print STDERR $warning;
						}
					} elsif (!$subscribe->paymentExists($paypal->{txn_id})){
						# What did I say about that race condition.
					
						$warning = "DEBUG: Payment accepted but record not added to payment table!\n" . Dumper($payment);
						print STDERR $warning;
					}
				}
			}
		}
		# Now for other statuses
		elsif(($paypal->{payment_status} eq 'Denied' || $paypal->{payment_status} eq 'Failed') && $res->content eq 'VERIFIED'){
			# This should probably be brought to the attention of the user. Myabe via email.
			# Save this for later -- paulej72 2014/08/01
		}
		elsif(($paypal->{payment_status} eq 'Expired' || $paypal->{payment_status} eq 'Voided') && $res->content eq 'VERIFIED'){
			# This means OUR account key is either expired or has been canceled.
			# It needs to go to the attention of an admin ASAFP by whatever means necessary.
			# Save this for later -- paulej72 2014/08/01
		}
		elsif(($paypal->{payment_status} eq 'Reversed' || $paypal->{payment_status} eq 'Refunded') && $res->content eq 'VERIFIED'){
			# The dillhole reversed payment on us. Remove any previously paid for days and the transaction.
			my $uid = $subscribe->txnToUID($paypal->{parent_txn_id});
			my $days = $subscribe->getDaysByTxn($paypal->{txn_id});
			$subscribe->removeDaysFromSubscriber($days, $uid);
			$subscribe->removePayment($paypal->{parent_txn_id});
		}

		# log to paypal_log
		$subscribe->ppAddLog($logthis);
	}
	elsif($reqPath eq $constants->{stripe_ipn_path}) {
		my $content;
		if(defined $tx->req->content->asset->{content}) {
			# eval because there is no is_this_fucking_json method in the JSON module and we can't be having errors unaccounted for
			eval { $content = decode_json($tx->req->content->asset->{content}); };
			unless(ref($content) eq "HASH" && !$@) {
				print "Malformed JSON in request\n".Dumper($tx->req->content);
				return;
			}
			if(defined $content->{data}->{object}->{source}) {$content->{data}->{object}->{source} = "Look it up on the Stripe website if necessary.";}

			# Good payment. Do our thing.
			if(defined $content->{data}->{object}->{status} &&
				$content->{data}->{object}->{status} eq 'succeeded' &&
				defined $content->{type} &&
				$content->{type} eq 'charge.succeeded')
			{
				my $metaData = $content->{data}->{object}->{metadata};
				my $cipher = Crypt::CBC->new(
					-cipher         => 'Rijndael',
					-key            => $constants->{crypt_key},
					-keysize        => 32,
				);
				foreach my $key (keys %$metaData) {
					$metaData->{$key} = $cipher->decrypt(decode_base64($metaData->{$key}));
				}
				$content->{data}->{object}->{metadata} = $metaData;
				if(! ref($content->{data}->{object}->{source}) ne "HASH") {
						print "\n".Dumper($content)."\n";
						$tx->res->code(200);
						$tx->res->headers->content_type('text/plain');
						$tx->res->body("");

						# Resume transaction
						$tx->resume;
					return;
				}
				my $submethod = $content->{data}->{object}->{source}->{type} eq "bitcoin" ? "BTC" : "CC";
				my $fee = $subscribe->stripeFee($content->{data}->{object}->{amount}, $submethod);
				my $net = $content->{data}->{object}->{amount} - $fee;

				my $payment = {
					days => $metaData->{days},
					uid     => $metaData->{uid},
					payment_net   => $net,
					payment_gross => $content->{data}->{object}->{amount},
					payment_type  => $metaData->{type},
					transaction_id => $content->{data}->{object}->{id},
					method => 'stripe',
					submethod => $submethod,
					email => $metaData->{from},
					raw_transaction  => encode_json($content),
					puid => $metaData->{puid}
				};
				# I'm only checking once because I don't really care if we do the work up until here unnecessarily and this is the latest we can possibly check.
				# If we start getting enough payments per minute to justify optimizing, you can pay me moneys and I'll optimize it. -TMB
				if(!$subscribe->paymentExists($content->{data}->{object}->{id})) {
					my ($rows, $result, $warning);
						$rows = $subscribe->insertPayment($payment);
						if ($rows && $rows == 1) {
							$result = $subscribe->addDaysToSubscriber($payment->{uid}, $payment->{days});
							if ($result && $result == 1){
								send_gift_msg($payment->{uid}, $payment->{puid}, $payment->{days}, $payment->{email}) if $payment->{payment_type} eq "gift";
							} else {
								$warning = "DEBUG: Payment accepted but user subscription not updated!\n" . Dumper($payment);
								print STDERR $warning;
							}
						} else {
							$warning = "DEBUG: Payment accepted but record not added to payment table!\n" . Dumper($payment);
							print STDERR $warning;
						}
				}
				$content->{source} = $tx->{original_remote_address};
				$subscribe->stripeAddLog($content);
			}
			# Any other status message just log it. We'll build a page for viewing non-success records for admins later.
			else {
				$content->{source} = $logthis->{original_remote_address};
				$subscribe->stripeAddLog($content);
			}
		}
		else {
			print STDERR "Malformed request object. Beats the fuck out of me.\n".Dumper($tx->req->content);
		}
	}

	# Response
	$tx->res->code(200);
	$tx->res->headers->content_type('text/plain');
	$tx->res->body("");

	# Resume transaction
	$tx->resume;
});
$cbServer->run;

sub send_gift_msg {
	my ($uid, $puid, $days, $from) = @_;
	
	my $slashdb = getCurrentDB();
	my $constants = getCurrentStatic();

	my $receiving_user  = $slashdb->getUser($uid);
	my $purchasing_user = $slashdb->getUser($puid);

	my $message = slashDisplay('gift_msg', {
		receiving_user  => $receiving_user,
		purchasing_user => $purchasing_user,
		days 		=> $days,
		from		=> $from	
	}, { Return => 1, Nocomm => 1 } );
	my $title = "$days Day Gift Subscription to $constants->{sitename}\n";
	doEmail($uid, $title, $message);
}

exit 0;
